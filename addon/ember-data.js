/* global requirejs */

import require from 'require';
import config from 'ember-get-config';
import assert from './assert';
import faker from './faker';
import Factory from './factory';
import { hasEmberData, isDsModel } from 'ember-cli-mirage/utils/ember-data';
import { camelize } from 'ember-cli-mirage/utils/inflector';
import { Model, belongsTo, hasMany } from 'ember-cli-mirage';

const {
  modulePrefix
} = config;

// Caches
let DsModels, Models, Factories;

/**
 * Get all ember data models under the app's namespaces
 *
 * @method getDsModels
 * @private
 * @return {Object} models
 */
export function getDsModels() {
  if (DsModels) {
    return DsModels;
  }

  let moduleMap = requirejs.entries;
  let modelMatchRegex = new RegExp(`^${modulePrefix}/models`, 'i');

  DsModels = {};

  if (!hasEmberData) {
    return DsModels;
  }

  Object.keys(moduleMap)
    .filter((module) => !!module.match(modelMatchRegex))
    .forEach((path) => {
      let paths = path.split('/');
      let modelName = paths[paths.length - 1];
      let model = require(path, null, null, true).default;

      if (isDsModel(model)) {
        DsModels[modelName] = model;
      }
    });

  return DsModels;
}

/**
 * Get all mirage models for each of the ember-data models
 *
 * @method getModels
 * @private
 * @return {Object} models
 */
export function getModels() {
  if (Models) {
    return Models;
  }

  let models = getDsModels();
  Models = {};

  Object.keys(models).forEach(modelName => {
    let model = models[modelName];
    let attrs = {};

    model.eachRelationship((name, r) => {
      if (r.kind === 'belongsTo') {
        attrs[name] = belongsTo(r.type, r.options);
      } else if (r.kind === 'hasMany') {
        attrs[name] = hasMany(r.type, r.options);
      }
    });

    Models[modelName] = Model.extend(attrs);
  });

  return Models;
}

/**
 * A lookup method for an autogenerated model
 *
 * @method modelFor
 * @private
 * @param  {String} name
 * @return {Model}
 */
export function modelFor(name) {
  let models = getModels();
  assert(!!models[name], `Model of type '${name}' does not exist.`);
  return models[name];
}

/**
 * Get all mirage factories for each of the ember-data models
 *
 * @method getFactories
 * @private
 * @return {Object} factories
 */
export function getFactories() {
  if (Factories) {
    return Factories;
  }

  let models = getDsModels();
  Factories = {};

  Object.keys(models).forEach(modelName => {
    let camelizedModelName = camelize(modelName);
    let model = models[modelName];
    let attrs = {};

    model.eachAttribute((name, attr) => {
      attrs[name] = getFactoryForAttribute(attr);
    });

    Factories[camelizedModelName] = Factory.extend(attrs);
  });

  return Factories;
}

/**
 * A lookup method for an autogenerated factory
 *
 * @method factoryFor
 * @private
 * @param  {String} name
 * @return {Factory}
 */
export function factoryFor(name) {
  let factories = getFactories();
  let camelizedName = camelize(name);
  assert(!!factories[camelizedName], `Model of type '${name}' does not exist.`);
  return factories[camelizedName];
}

function getFactoryForAttribute(attr) {
  let options = attr && attr.options && attr.options.mirage;

  if (!options) {
    return getDefaultFactoryForType(attr.type);
  }

  return getFactoryForOptions(options, attr);
}

function getDefaultFactoryForType(type) {
  switch (type) {
    case 'string':
      return () => faker.random.word();
    case 'number':
      return () => faker.random.number();
    case 'boolean':
      return () => faker.random.boolean();
    case 'date':
      return () => faker.date.future();
    default:
      return () => faker.random.word();
  }
}

function getFactoryForOptions(options, attr) {
  if (typeof options === 'function') {
    return function() {
      return options.call(this, faker);
    };
  }

  return getDefaultFactoryForType(attr.type);
}
