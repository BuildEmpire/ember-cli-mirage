import { module, test } from 'qunit';
import Server from 'ember-cli-mirage/server';
import { Model, Factory } from 'ember-cli-mirage';
import { modelFor, factoryFor } from 'ember-cli-mirage/ember-data';

const CustomFriendModel = Model.extend();
CustomFriendModel.__isCustom__ = true;

const CustomPetFactory = Factory.extend();
CustomPetFactory.__isCustom__ = true;

module('Integration | Ember Data', {
  beforeEach() {
    this.server = new Server({
      environment: 'development',
      discoverEmberDataModels: true,
      generateFactoriesForEmberDataModels: true,
      scenarios: {
        default() {}
      },
      models: {
        // Friend exists in dummy/app/models. We want to make sure pre-defined
        // models take precedence
        friend: CustomFriendModel,
        foo: Model.extend()
      },
      factories: {
        pet: CustomPetFactory,
        bar: Factory.extend()
      }
    });
  },
  afterEach() {
    this.server.shutdown();
  }
});

test(`Ember data models were generated and loaded`, function(assert) {
  let { schema } = this.server;
  let registry = schema._registry;

  assert.ok(registry.foo, 'Pre defined model Foo has been registered');
  assert.ok(registry.address, 'Ember data model Address has been registered');
  assert.ok(registry.contact, 'Ember data model Contact has been registered');
  assert.equal(registry.address.foreignKeys.length, 1, 'Ember data model Address has the correct relationships');
});

test(`Defined mirage models take precedence over autogenerated ones`, function(assert) {
  let { schema } = this.server;
  let registry = schema._registry;

  assert.ok(registry.friend, 'Model Friend has been registered');
  assert.ok(registry.friend.class.__isCustom__, 'Model Friend is not the autogenerated one');
});

test(`Auto generated models can be extended via modelFor`, function(assert) {
  let { schema } = this.server;
  let registry = schema._registry;

  assert.ok(registry.address, 'Ember data model Address has been registered');
  assert.ok(modelFor('address'), 'Ember data model Address is found');
  assert.equal(typeof modelFor('address').extend, 'function', 'Ember data model Address can be extended');
});

test(`modelFor is only for auto generated models`, function(assert) {
  assert.notOk(modelFor('friend').__isCustom__, 'Friend model is not the pre defined one');
  assert.throws(() => modelFor('foo'), () => true, 'Pre defined mirage models cannot be found via modelFor');
});

test(`Ember data factories were generated and loaded`, function(assert) {
  let factoryMap = this.server._factoryMap;

  assert.ok(factoryMap.bar, 'Pre defined factory Bar has been registered');
  assert.ok(factoryMap.address, 'Ember data factory Address has been registered');
  assert.ok(factoryMap.contact, 'Ember data factory Contact has been registered');
});

test(`Defined mirage factories take precedence over autogenerated ones`, function(assert) {
  let factoryMap = this.server._factoryMap;

  assert.ok(factoryMap.pet, 'Factory Pet has been registered');
  assert.ok(factoryMap.pet.__isCustom__, 'Factory Pet is not the autogenerated one');
});

test(`Auto generated factories can be extended via factoryFor`, function(assert) {
  let factoryMap = this.server._factoryMap;

  assert.ok(factoryMap.address, 'Ember data factory Address has been registered');
  assert.ok(factoryFor('address'), 'Ember data factory Address is found');
  assert.equal(typeof factoryFor('address').extend, 'function', 'Ember data factory Address can be extended');
});

test(`factoryFor is only for auto generated models`, function(assert) {
  assert.notOk(factoryFor('pet').__isCustom__, 'Pet factory is not the pre defined one');
  assert.throws(() => factoryFor('bar'), 'Pre defined mirage factories cannot be found via factoryFor');
});

test(`Generated factories produce the correct basic types for attributes`, function(assert) {
  let contact = this.server.create('contact');

  assert.equal(typeof contact.name, 'string', `Contact name should be a string`);
  assert.equal(typeof contact.blocked, 'boolean', `Contact blocked should be a boolean`);
  assert.equal(typeof contact.age, 'number', `Contact age should be a number`);
  assert.ok(contact.lastContacted instanceof Date, `Contact lastContacted should be a date`);
  assert.equal(
    typeof contact.notes, 'string',
    `Contact notes should default to a string because it's untyped`
  );
});

test(`A factory method can be supplied as the "mirage" option for an attribute`, function(assert) {
  let blogPost = this.server.create('blog-post');

  assert.equal(
    blogPost.subtitle,
    'THE SUBTITLE',
    `Blog post subtitle should be the value returned by the configured factory method`
  );
});

test(`A factory method supplied on an attribute is called with faker as an argument`, function(assert) {
  let expectedWordCount = 200;
  let blogPost = this.server.create('blog-post');

  assert.equal(
    blogPost.content.split(' ').length,
    expectedWordCount,
    `Blog post content should be random text of the specified length`
  );
});

test(`The factory method configured on an attribute will be called with the right 'this' `
    + `to query other properties on the model when returning a value`
    , function(assert) {
  let blogPost = this.server.create('blog-post');
  let now = new Date();

  assert.ok(
    blogPost.lastEditedAt instanceof Date,
    `Blog post lastEditedAt should be a date`
  );

  assert.ok(
    blogPost.lastEditedAt >= blogPost.publishedAt,
    `Blog post lastEditedAt should be later than or equal to publishedAt`
  );

  assert.ok(
    blogPost.lastEditedAt <= now,
    `Blog post lastEditedAt should be before than or equal to now`
  );
});
